{"ast":null,"code":"import { SET_LOADING, SET_SEARCH_QUERY, SEARCH_USERS, SEARCH_REPOS, SET_SEARCH_USERS_TOTAL, SET_SEARCH_REPOS_TOTAL, CLEAR_RESULTS, GET_USER_REPOS, GET_USER } from './types';\nimport axios from '../axios';\nlet githubClientId;\nlet githubClientSecret;\n\nif (process.env.NODE_ENV !== 'production') {\n  githubClientId = process.env.REACT_APP_GITHUB_CLIENT_ID;\n  githubClientSecret = process.env.REACT_APP_GITHUB_CLIENT_SECRET;\n} else {\n  githubClientId = process.env.GITHUB_CLIENT_ID;\n  githubClientSecret = process.env.GITHUB_CLIENT_SECRET;\n}\n\nexport const setLoading = () => {\n  return {\n    type: SET_LOADING\n  };\n};\nexport const setSearchQuery = searchQuery => {\n  return {\n    type: SET_SEARCH_QUERY,\n    payload: searchQuery\n  };\n}; // Search Users and Repos\n\nexport const searchUsersRepos = (activeSearchQuery, page, type, sort) => (dispatch, getState) => {\n  dispatch(setLoading());\n  const {\n    searchQuery\n  } = getState().github;\n\n  if (page === 1 && activeSearchQuery !== searchQuery) {\n    dispatch(getUsersReposTotal(activeSearchQuery));\n  }\n\n  if (type === 'Users') {\n    dispatch(searchUsers(activeSearchQuery, page, type, sort));\n  }\n\n  if (type === 'Repositories') {\n    dispatch(searchRepos(activeSearchQuery, page, type, sort));\n  }\n\n  if (activeSearchQuery !== searchQuery) {\n    dispatch(setSearchQuery(activeSearchQuery));\n  }\n}; // Search Users base on params\n\nexport const searchUsers = (searchQuery, page, type, sort) => async dispatch => {\n  dispatch(setLoading());\n\n  try {\n    if (sort === 'best') sort = '';\n    const searchUsers = await axios.get(`search/users?q=${searchQuery}&p=${page}&type=${type}&sort=${sort}&order=desc&client_id=${githubClientId}&client_secret=${githubClientSecret}&per_page=80`);\n\n    if (searchUsers) {\n      dispatch({\n        type: SEARCH_USERS,\n        payload: searchUsers.data.items\n      });\n    }\n  } catch (error) {\n    console.log(error);\n  }\n}; // Search Repos base on params\n\nexport const searchRepos = (searchQuery, page, type, sort) => async dispatch => {\n  dispatch(setLoading());\n\n  try {\n    if (sort === 'best') sort = '';\n    const searchRepos = await axios.get(`search/repositories?q=${searchQuery}&p=${page}&type=${type}&sort=${sort}&order=desc&client_id=${githubClientId}&client_secret=${githubClientSecret}&per_page=80`);\n\n    if (searchRepos) {\n      dispatch({\n        type: SEARCH_REPOS,\n        payload: searchRepos.data.items\n      });\n    }\n  } catch (error) {\n    console.log(error);\n  }\n}; // get users and repos total\n\nexport const getUsersReposTotal = searchQuery => async dispatch => {\n  try {\n    const [getUsersTotal, getReposTotal] = await Promise.all([axios.get(`search/users?q=${searchQuery}&client_id=${githubClientId}&client_secret=${githubClientSecret}&order=desc&per_page=1`), axios.get(`search/repositories?q=${searchQuery}&client_id=${githubClientId}&client_secret=${githubClientSecret}&order=desc&per_page=1`)]);\n\n    if (getUsersTotal && getReposTotal) {\n      dispatch({\n        type: SET_SEARCH_USERS_TOTAL,\n        payload: getUsersTotal.data.total_count\n      });\n      dispatch({\n        type: SET_SEARCH_REPOS_TOTAL,\n        payload: getReposTotal.data.total_count\n      });\n    } else {\n      dispatch({\n        type: CLEAR_RESULTS\n      });\n    }\n  } catch (error) {\n    console.log(error);\n  }\n}; //  Clear results\n\nexport const clearResults = () => {\n  return {\n    type: CLEAR_RESULTS\n  };\n}; //  Get User\n\nexport const getUser = userLogin => async dispatch => {\n  dispatch(setLoading());\n\n  try {\n    const [getUser, getUserRepos] = await Promise.all([axios.get(`users/${userLogin}?client_id=${githubClientId}&client_secret=${githubClientSecret}`), axios.get(`users/${userLogin}/repos?type=all&sort=updated&client_id=${githubClientId}&client_secret=${githubClientSecret}&order=desc`)]);\n\n    if (getUser && getUserRepos) {\n      dispatch({\n        type: GET_USER,\n        payload: getUser.data\n      });\n      dispatch({\n        type: GET_USER_REPOS,\n        payload: getUserRepos.data\n      });\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"sources":["/Users/apple/Desktop/GitAssignment/src/actions/github.js"],"names":["SET_LOADING","SET_SEARCH_QUERY","SEARCH_USERS","SEARCH_REPOS","SET_SEARCH_USERS_TOTAL","SET_SEARCH_REPOS_TOTAL","CLEAR_RESULTS","GET_USER_REPOS","GET_USER","axios","githubClientId","githubClientSecret","process","env","NODE_ENV","REACT_APP_GITHUB_CLIENT_ID","REACT_APP_GITHUB_CLIENT_SECRET","GITHUB_CLIENT_ID","GITHUB_CLIENT_SECRET","setLoading","type","setSearchQuery","searchQuery","payload","searchUsersRepos","activeSearchQuery","page","sort","dispatch","getState","github","getUsersReposTotal","searchUsers","searchRepos","get","data","items","error","console","log","getUsersTotal","getReposTotal","Promise","all","total_count","clearResults","getUser","userLogin","getUserRepos"],"mappings":"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","sourcesContent":["import {\n  SET_LOADING,\n  SET_SEARCH_QUERY,\n  SEARCH_USERS,\n  SEARCH_REPOS,\n  SET_SEARCH_USERS_TOTAL,\n  SET_SEARCH_REPOS_TOTAL,\n  CLEAR_RESULTS,\n  GET_USER_REPOS,\n  GET_USER\n} from './types';\nimport axios from '../axios';\n\nlet githubClientId;\nlet githubClientSecret;\n\nif (process.env.NODE_ENV !== 'production') {\n  githubClientId = process.env.REACT_APP_GITHUB_CLIENT_ID;\n  githubClientSecret = process.env.REACT_APP_GITHUB_CLIENT_SECRET;\n} else {\n  githubClientId = process.env.GITHUB_CLIENT_ID;\n  githubClientSecret = process.env.GITHUB_CLIENT_SECRET;\n}\nexport const setLoading = () => {\n  return {\n    type: SET_LOADING\n  };\n};\n\nexport const setSearchQuery = searchQuery => {\n  return {\n    type: SET_SEARCH_QUERY,\n    payload: searchQuery\n  };\n};\n// Search Users and Repos\nexport const searchUsersRepos = (activeSearchQuery, page, type, sort) => (\n  dispatch,\n  getState\n) => {\n  dispatch(setLoading());\n  const { searchQuery } = getState().github;\n  if (page === 1 && activeSearchQuery !== searchQuery) {\n    dispatch(getUsersReposTotal(activeSearchQuery));\n  }\n  if (type === 'Users') {\n    dispatch(searchUsers(activeSearchQuery, page, type, sort));\n  }\n\n  if (type === 'Repositories') {\n    dispatch(searchRepos(activeSearchQuery, page, type, sort));\n  }\n  if (activeSearchQuery !== searchQuery) {\n    dispatch(setSearchQuery(activeSearchQuery));\n  }\n};\n\n// Search Users base on params\nexport const searchUsers = (\n  searchQuery,\n  page,\n  type,\n  sort\n) => async dispatch => {\n  dispatch(setLoading());\n  try {\n    if (sort === 'best') sort = '';\n    const searchUsers = await axios.get(\n      `search/users?q=${searchQuery}&p=${page}&type=${type}&sort=${sort}&order=desc&client_id=${githubClientId}&client_secret=${githubClientSecret}&per_page=80`\n    );\n    if (searchUsers) {\n      dispatch({\n        type: SEARCH_USERS,\n        payload: searchUsers.data.items\n      });\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// Search Repos base on params\nexport const searchRepos = (\n  searchQuery,\n  page,\n  type,\n  sort\n) => async dispatch => {\n  dispatch(setLoading());\n  try {\n    if (sort === 'best') sort = '';\n    const searchRepos = await axios.get(\n      `search/repositories?q=${searchQuery}&p=${page}&type=${type}&sort=${sort}&order=desc&client_id=${githubClientId}&client_secret=${githubClientSecret}&per_page=80`\n    );\n    if (searchRepos) {\n      dispatch({\n        type: SEARCH_REPOS,\n        payload: searchRepos.data.items\n      });\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n// get users and repos total\nexport const getUsersReposTotal = searchQuery => async dispatch => {\n  try {\n    const [getUsersTotal, getReposTotal] = await Promise.all([\n      axios.get(\n        `search/users?q=${searchQuery}&client_id=${githubClientId}&client_secret=${githubClientSecret}&order=desc&per_page=1`\n      ),\n      axios.get(\n        `search/repositories?q=${searchQuery}&client_id=${githubClientId}&client_secret=${githubClientSecret}&order=desc&per_page=1`\n      )\n    ]);\n    if (getUsersTotal && getReposTotal) {\n      dispatch({\n        type: SET_SEARCH_USERS_TOTAL,\n        payload: getUsersTotal.data.total_count\n      });\n      dispatch({\n        type: SET_SEARCH_REPOS_TOTAL,\n        payload: getReposTotal.data.total_count\n      });\n    } else {\n      dispatch({\n        type: CLEAR_RESULTS\n      });\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n//  Clear results\nexport const clearResults = () => {\n  return {\n    type: CLEAR_RESULTS\n  };\n};\n\n//  Get User\nexport const getUser = userLogin => async dispatch => {\n  dispatch(setLoading());\n  try {\n    const [getUser, getUserRepos] = await Promise.all([\n      axios.get(\n        `users/${userLogin}?client_id=${githubClientId}&client_secret=${githubClientSecret}`\n      ),\n      axios.get(\n        `users/${userLogin}/repos?type=all&sort=updated&client_id=${githubClientId}&client_secret=${githubClientSecret}&order=desc`\n      )\n    ]);\n    if (getUser && getUserRepos) {\n      dispatch({\n        type: GET_USER,\n        payload: getUser.data\n      });\n      dispatch({\n        type: GET_USER_REPOS,\n        payload: getUserRepos.data\n      });\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}